# Railway Frontend Dockerfile
# =========================
# This Dockerfile implements an optimized build process with proper caching:
# - Uses explicit cache paths to avoid conflicts with Railway's build system
# - Implements multi-stage build for better layer caching
# - Separates dependency installation from build for better caching

# BUILD STAGE
FROM node:18-alpine AS build

# Set working directory
WORKDIR /app

# Copy package files first (for better layer caching)
COPY package*.json ./

# Install dependencies
# We avoid mounting any caches under node_modules to prevent EBUSY errors
RUN npm ci --prefer-offline --no-audit --loglevel=error

# Copy source code and build
# This is separate from npm ci so source changes don't invalidate dependency cache
COPY . .
RUN npm run build

# SERVE STAGE
FROM node:18-alpine

WORKDIR /app

# Install serve globally
RUN npm install -g serve

# Copy only the built assets from build stage
COPY --from=build /app/dist ./dist

# Expose port
EXPOSE $PORT

# Start the application
CMD ["sh", "-c", "serve -s dist -l $PORT --no-clipboard --no-port-switching"] 