# Railway Frontend Dockerfile
# =========================
# This Dockerfile implements an optimized build process with proper caching:
# - Uses explicit cache paths to avoid conflicts with Railway's build system
# - Implements multi-stage build for better layer caching
# - Separates dependency installation from build for better caching

# BUILD STAGE
FROM node:18-alpine AS build

# Set working directory
WORKDIR /app

# Copy package files first (for better layer caching)
# We need both root and web package files for the monorepo structure
COPY package.json package-lock.json ./
COPY web/package.json web/package-lock.json ./web/

# Install dependencies in web directory
RUN cd web && npm ci --prefer-offline --no-audit --loglevel=error

# Copy source code
COPY . .

# Build with environment variables
# Railway provides these at build time, but we need to make sure they're available
ARG VITE_API_URL
ENV VITE_API_URL=$VITE_API_URL

# Debug: Show what environment variables are available during build
RUN echo "üîç BUILD DEBUG: VITE_API_URL = $VITE_API_URL"
RUN echo "üîç BUILD DEBUG: All ENV vars:" && env | grep -E "(VITE_|NODE_|RAILWAY_)" || true

# Build the application with verbose output
RUN echo "üîç BUILD DEBUG: Starting build process..." && \
    cd web && npm run build 2>&1 | tee build.log

# Debug: Check if the build contains the correct API URL
RUN echo "üîç BUILD DEBUG: Checking built files for API URL..." && \
    find web/dist -name "*.js" -exec grep -l "fastapi-production-1d13.up.railway.app" {} \; || \
    echo "üîç BUILD DEBUG: API URL not found in built files"

# Debug: Show actual content of built files (first 50 lines)
RUN echo "üîç BUILD DEBUG: Sample content from built JS files:" && \
    find web/dist -name "*.js" | head -1 | xargs head -50 || \
    echo "üîç BUILD DEBUG: No JS files found"

# Debug: Search for any occurrence of 'VITE_API_URL' in built files
RUN echo "üîç BUILD DEBUG: Searching for VITE_API_URL in built files:" && \
    find web/dist -name "*.js" -exec grep -H "VITE_API_URL" {} \; || \
    echo "üîç BUILD DEBUG: VITE_API_URL not found in built files"

# SERVE STAGE
FROM node:18-alpine

WORKDIR /app

# Install serve globally
RUN npm install -g serve

# Copy only the built assets from build stage
COPY --from=build /app/web/dist ./dist

# Expose port
EXPOSE $PORT

# Start the application
CMD ["sh", "-c", "serve -s dist -l $PORT --no-clipboard --no-port-switching"] 
