# Railway Frontend Dockerfile
# =========================
# This Dockerfile implements an optimized build process with proper caching:
# - Uses explicit cache paths to avoid conflicts with Railway's build system
# - Implements multi-stage build for better layer caching
# - Separates dependency installation from build for better caching

# BUILD STAGE
FROM node:18-alpine AS build

# Set working directory
WORKDIR /app

# Copy package files first (for better layer caching)
COPY package*.json ./

# Install dependencies
# We avoid mounting any caches under node_modules to prevent EBUSY errors
RUN npm ci --prefer-offline --no-audit --loglevel=error

# Copy source code
COPY . .

# Build with environment variables
# Railway provides these at build time, but we need to make sure they're available
ARG VITE_API_URL
ENV VITE_API_URL=$VITE_API_URL

# Debug: Show what environment variables are available during build
RUN echo "üîç BUILD DEBUG: VITE_API_URL = $VITE_API_URL"
RUN echo "üîç BUILD DEBUG: All ENV vars:" && env | grep -E "(VITE_|NODE_|RAILWAY_)" || true

# Build the application
RUN npm run build

# Debug: Check if the build contains the correct API URL
RUN echo "üîç BUILD DEBUG: Checking built files for API URL..." && \
    find dist -name "*.js" -exec grep -l "fastapi-production-1d13.up.railway.app" {} \; || \
    echo "üîç BUILD DEBUG: API URL not found in built files"

# SERVE STAGE
FROM node:18-alpine

WORKDIR /app

# Install serve globally
RUN npm install -g serve

# Copy only the built assets from build stage
COPY --from=build /app/dist ./dist

# Expose port
EXPOSE $PORT

# Start the application
CMD ["sh", "-c", "serve -s dist -l $PORT --no-clipboard --no-port-switching"] 